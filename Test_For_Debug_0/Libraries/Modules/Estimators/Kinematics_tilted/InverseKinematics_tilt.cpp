//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: InverseKinematics_tilt.cpp
//
// MATLAB Coder version            : 4.1
// C/C++ source code generated on  : 05-Nov-2020 16:37:30
//

// Include Files
#include "InverseKinematics_tilt.h"

// Function Definitions

//
// INVERSEKINEMATICS_TILT
//     DPSI = INVERSEKINEMATICS_TILT(DQ1,DQ2,DQ3,DQ4,DX,DY,Q1,Q2,Q3,Q4,RK,RW)
// Arguments    : float dq1
//                float dq2
//                float dq3
//                float dq4
//                float dx
//                float dy
//                float q1
//                float q2
//                float q3
//                float q4
//                float rk
//                float rw
//                float dpsi[3]
// Return Type  : void
//
void InverseKinematics_tilt(float dq1, float dq2, float dq3, float dq4, float dx,
  float dy, float q1, float q2, float q3, float q4, float rk, float rw, float
  dpsi[3])
{
  float t2;
  float t3;
  float t4;
  float t5;
  float t6;
  float t7;
  float t8;
  float dpsi_tmp;
  float b_dpsi_tmp;
  float c_dpsi_tmp;
  float d_dpsi_tmp;
  float e_dpsi_tmp;
  float f_dpsi_tmp;
  float g_dpsi_tmp;
  float h_dpsi_tmp;
  float i_dpsi_tmp;
  float j_dpsi_tmp;
  float k_dpsi_tmp;
  float l_dpsi_tmp;
  float m_dpsi_tmp;
  float n_dpsi_tmp;
  float o_dpsi_tmp;
  float p_dpsi_tmp;
  float q_dpsi_tmp;
  float r_dpsi_tmp;
  float s_dpsi_tmp;
  float t_dpsi_tmp;
  float u_dpsi_tmp;
  float v_dpsi_tmp;

  //     This function was generated by the Symbolic Math Toolbox version 8.2.
  //     18-Oct-2019 09:23:41
  t2 = 1.0F / rk;
  t3 = 1.0F / rw;
  t4 = q1 * q4 * 2.0F;
  t5 = q1 * q1;
  t6 = q2 * q2;
  t7 = q3 * q3;
  t8 = q4 * q4;
  dpsi_tmp = dy * t2;
  b_dpsi_tmp = dx * t2;
  c_dpsi_tmp = q2 * q3 * 2.0F;
  d_dpsi_tmp = dq1 * q2;
  e_dpsi_tmp = dq2 * q1;
  f_dpsi_tmp = dq1 * q3;
  g_dpsi_tmp = dq3 * q1;
  h_dpsi_tmp = dq1 * q4;
  i_dpsi_tmp = dq2 * q3;
  j_dpsi_tmp = dq3 * q2;
  k_dpsi_tmp = dq4 * q1;
  l_dpsi_tmp = dq2 * q4;
  m_dpsi_tmp = dq4 * q2;
  n_dpsi_tmp = dq3 * q4;
  o_dpsi_tmp = dq4 * q3;
  dpsi[0] = 1.41421354F * t3 * (rk * (((((h_dpsi_tmp * -2.0F + i_dpsi_tmp * 2.0F)
    - j_dpsi_tmp * 2.0F) + k_dpsi_tmp * 2.0F) + b_dpsi_tmp * (q1 * q2 * 2.0F -
    q3 * q4 * 2.0F)) + dpsi_tmp * (q1 * q3 * 2.0F + q2 * q4 * 2.0F)) *
    0.819152057F + rk * (((((d_dpsi_tmp * 2.0F - e_dpsi_tmp * 2.0F) - n_dpsi_tmp
    * 2.0F) + o_dpsi_tmp * 2.0F) - dpsi_tmp * (((t5 + t6) - t7) - t8)) +
    b_dpsi_tmp * (t4 + c_dpsi_tmp)) * 0.57357645F) * -0.5F - rk * t3 *
    (((((f_dpsi_tmp * 2.0F - g_dpsi_tmp * 2.0F) + l_dpsi_tmp * 2.0F) -
       m_dpsi_tmp * 2.0F) + b_dpsi_tmp * (((t5 - t6) + t7) - t8)) + dpsi_tmp *
     (t4 - c_dpsi_tmp)) * 0.707106769F;
  dpsi_tmp = dx * q1;
  b_dpsi_tmp = dy * q1;
  c_dpsi_tmp = dy * q2;
  p_dpsi_tmp = dx * t5;
  q_dpsi_tmp = dx * t6;
  r_dpsi_tmp = dx * t7;
  s_dpsi_tmp = dx * t8;
  t_dpsi_tmp = dy * t5;
  u_dpsi_tmp = dy * t6;
  v_dpsi_tmp = dy * t7;
  t2 = dy * t8;
  t4 = dpsi_tmp * q2;
  dpsi_tmp *= q4;
  t5 = dx * q2 * q3;
  t6 = dx * q3 * q4;
  t7 = b_dpsi_tmp * q3;
  b_dpsi_tmp *= q4;
  t8 = c_dpsi_tmp * q3;
  c_dpsi_tmp *= q4;
  d_dpsi_tmp *= rk;
  e_dpsi_tmp *= rk;
  f_dpsi_tmp *= rk;
  g_dpsi_tmp *= rk;
  h_dpsi_tmp *= rk;
  i_dpsi_tmp *= rk;
  j_dpsi_tmp *= rk;
  k_dpsi_tmp *= rk;
  l_dpsi_tmp *= rk;
  m_dpsi_tmp *= rk;
  n_dpsi_tmp *= rk;
  o_dpsi_tmp *= rk;
  dpsi[1] = t3 * (((((((((((((((((((((((((((p_dpsi_tmp * 4.68724719E+28F -
    q_dpsi_tmp * 4.68724719E+28F) + r_dpsi_tmp * 4.68724719E+28F) - s_dpsi_tmp *
    4.68724719E+28F) - t_dpsi_tmp * 1.65334557E+31F) - u_dpsi_tmp *
    1.65334557E+31F) + v_dpsi_tmp * 1.65334557E+31F) + t2 * 1.65334557E+31F) -
    t4 * 2.34962784E+31F) + dpsi_tmp * 3.30669114E+31F) + t5 * 3.30669114E+31F)
    + t6 * 2.34962784E+31F) - t7 * 2.34962784E+31F) + b_dpsi_tmp *
    9.37449438E+28F) - t8 * 9.37449438E+28F) - c_dpsi_tmp * 2.34962784E+31F) +
    d_dpsi_tmp * 3.30669114E+31F) - e_dpsi_tmp * 3.30669114E+31F) + f_dpsi_tmp *
    9.37449438E+28F) - g_dpsi_tmp * 9.37449438E+28F) + h_dpsi_tmp *
    2.34962784E+31F) - i_dpsi_tmp * 2.34962784E+31F) + j_dpsi_tmp *
                       2.34962784E+31F) - k_dpsi_tmp * 2.34962784E+31F) +
                     l_dpsi_tmp * 9.37449438E+28F) - m_dpsi_tmp *
                    9.37449438E+28F) - n_dpsi_tmp * 3.30669114E+31F) +
                  o_dpsi_tmp * 3.30669114E+31F) / 2.02824096E+31F;
  dpsi[2] = t3 * (((((((((((((((((((((((((((p_dpsi_tmp * -2.85899133E+31F +
    q_dpsi_tmp * 2.85899133E+31F) - r_dpsi_tmp * 2.85899133E+31F) + s_dpsi_tmp *
    2.85899133E+31F) - t_dpsi_tmp * 1.66146423E+31F) - u_dpsi_tmp *
    1.66146423E+31F) + v_dpsi_tmp * 1.66146423E+31F) + t2 * 1.66146423E+31F) +
    t4 * 4.69925569E+31F) + dpsi_tmp * 3.32292846E+31F) + t5 * 3.32292846E+31F)
    - t6 * 4.69925569E+31F) + t7 * 4.69925569E+31F) - b_dpsi_tmp *
    5.71798266E+31F) + t8 * 5.71798266E+31F) + c_dpsi_tmp * 4.69925569E+31F) +
    d_dpsi_tmp * 3.32292846E+31F) - e_dpsi_tmp * 3.32292846E+31F) - f_dpsi_tmp *
    5.71798266E+31F) + g_dpsi_tmp * 5.71798266E+31F) - h_dpsi_tmp *
    4.69925569E+31F) + i_dpsi_tmp * 4.69925569E+31F) - j_dpsi_tmp *
                       4.69925569E+31F) + k_dpsi_tmp * 4.69925569E+31F) -
                     l_dpsi_tmp * 5.71798266E+31F) + m_dpsi_tmp *
                    5.71798266E+31F) - n_dpsi_tmp * 3.32292846E+31F) +
                  o_dpsi_tmp * 3.32292846E+31F) * -2.46519033E-32F;
}

//
// File trailer for InverseKinematics_tilt.cpp
//
// [EOF]
//
